
Pagination
--------------
- get data by page wise - it requires Pageable interface & PageRequest class.

Pageable pageable = PageRequest.of(0,10,Sort.by("seatNo"));//first_page, number_of_records_per_page, sort_obj

Page<Passenger> page = repo.findAll(pageable);

page.getContent()
hasNext()
hasPrevious()
getNumber()
isFirst()
isLast()

MVC app for pagination
----------------------------
Jpa-Pagination

pom.xml - web, data-jpa, tomcat-embed-jasper, jstl, mysql-connector-java

package com.pagination.entity
@Entity
@Table(name="emp")
public class Employee {
	@Id
	private Integer empno;
	
	private String ename;
}

package com.pagination.repository
@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {}

package com.pagination.service
public interface IEmployeeService {
	Page<Employee> findEmployees(int pageIndex);
}

package com.pagination.service.impl
public class EmployeeServiceImpl implements IEmployeeService {

	@Autowired
	EmployeeRepository repository;
	@Override
	public Page<Employee> findEmployees(int pageIndex) {
		Pageable pageable = PageRequest.of(pageIndex, 3, Sort.by("sal"));
		return repository.findAll(pageable);
	}

}

package com.pagination.controller
@Controller
public class EmployeeController {
	@Autowired 
	IEmployeeService service;

	@GetEmployee(value="/emps") //emps?pageIndex=1
	public String getEmployee(@RequestParam(defaultValue="0") int pageIndex, ModelMap modelMap) {

		//@RequestParam binds request parameters with method parameters
		//ModelMap object is accessible to the JSP page.

		Page<Employee> page = service.findEmployees(pageIndex);
		List<Employee> empList = page.getContent();
		modelMap.addAttribute("employees", empList);
		modelMap.addAttribute("next", page.hasNext()); //if(true) currentpage+1
		modelMap.addAttribute("back", page.hasPrevious()); //if(true) currentpage-1
		modelMap.addAttribute("currentPage", getNumber());
		
		return "ShowEmployee";

	}
}

src/main/webapp/WEB-INF/views/ShowEmployees.jsp
ShowEmployees.jsp

<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<table>
	<header>
		<tr>
			<th>E. No</th>
			<th>E. Name</th>
			<th>Sal</th>
			<th>Dept No</th>
		</tr>
	</header>
	<c:if test="${!empty employees}">
		<c:forEach items="${employees}" var="e">
			<tr>		
			<td><c:out value="${e.empno}"/></td>
			<td><c:out value="${e.ename}"/></td>
			<td><c:out value="${e.sal}"/></td>
			<td><c:out value="${e.deptno}"/></td>
			</tr>
		</c:forEach>
	</c:if>
<table>

<c:if test="${back}">
	<a href="emps?pageIndex=${currentPage-1}">Back</a>
</c:if>

<c:if test="${next}">
	<a href="emps?pageIndex=${currentPage+1}">Next</a>
</c:if>

application.properties
-------------------------
server.servlet.context-path=/Pagination
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update ['create' = creates & drop - used for testing purpose | 'update' = does not drop, if table not exist in DB it creates]

mysql> use db_name;
mysql> use test;
mysql> select * from emp; //empno|ename|sal|deptno